# dir_name <- "../../../Modelling/sorted/data"
#
#
# # Extracting csv files for SubjData
# # ---------------------------------
# myfolders <- list.dirs(recursive = FALSE)
# myfolders <- myfolders[1:8]
#
# for (h in 1:length(myfolders)){
#   subjdatafiles <- list.files(myfolders[h], pattern = "*SubjData.csv")
#   for (g in 1:length(subjdatafiles)){
#     file.copy(paste0(myfolders[h], "/", subjdatafiles[g]), dir_name)
#   }
# }
#
# rm( list = ls() )
# setwd("../../../Modelling/sorted/code")
# # ------------------------------------------------------------------------------------------------------------
# Transform Dataframe Subject Main Data
# -------------------------------------
col_names <- c("Target", "Trial_Phase", "Appl_Perturb",
"imv_X", "imv_Y",
"Endpoint_X", "Endpoint_Y",
"imv_Error", "Endpoint_Error",
"imv_Error_Mean", "Endpoint_Error_Mean",
"MT", "RT", "Max_Vel")
phase_names_f <- c('Prebaseline_SubjData', 'Familiarisation_SubjData',
'Baseline_NFB_SubjData', 'Baseline_SubjData',
'Postbaseline_SubjData', 'Training_SubjData',
'Generalisation_SubjData', 'Relearning_SubjData',
'Washout_SubjData')
phase_names <- c('Prebaseline', 'Familiarisation', 'Baseline_NFB', 'Baseline_S',
'Postbaseline', 'Training', 'Generalisation', 'Relearning',
'Washout')
phase_order <- 1:9
ldf_rec <- list()
for (i in 1:length(phase_names_f)) {
f_names <- list.files(paste('../data/', sep=''),
pattern=paste(phase_names_f[i]),
full.names=TRUE)
ldf <- lapply(f_names, function(z) {z<-fread(z); setnames(z,col_names)})
ldf <- lapply(seq_along(ldf), function(z) ldf[[z]][, sub := rep(z, .N)])
ldf <- lapply(seq_along(ldf), function(z) ldf[[z]][, phase := rep(phase_names[i], .N)])
ldf <- lapply(seq_along(ldf), function(z) ldf[[z]][, phase_order := rep(phase_order[i], .N)])
ldf_rec <- c(ldf_rec, ldf)
}
d <- rbindlist(ldf_rec)
d <- d[order(sub)]
## NOTE: Adapt the NFB targets (1 to 12)
d[Target %in% 13:24, Target := as.integer(Target - 12)]
## NOTE: add target_deg indicator column
d[, target_deg := -1]
d[Target == 1, target_deg := 0]
d[Target == 2, target_deg := 30]
d[Target == 3, target_deg := 60]
d[Target == 4, target_deg := 90]
d[Target == 5, target_deg := 120]
d[Target == 6, target_deg := 150]
d[Target == 7, target_deg := 180]
d[Target == 8, target_deg := -150]
d[Target == 9, target_deg := -120]
d[Target == 10, target_deg := -90]
d[Target == 11, target_deg := -60]
d[Target == 12, target_deg := -30]
## NOTE: add trial indicator column (fix problem with nfb and fb trials in baseline)
d <- d[order(sub, phase_order, Trial_Phase)]
d[, trial := 1:.N, .(sub)]
d[phase %in% c("Baseline_S", "Baseline_NFB"), trial := Trial_Phase+240]
## NOTE: add aware indicator column
subs_explicit = c(1, 2, 3, 5, 9, 10, 16, 18, 19, 20, 24, 28, 29, 30, 31, 33, 34,
40, 41, 44, 45, 46, 47, 48)
d[, aware := 'implicit']
d[sub %in% subs_explicit, aware := 'explicit']
## NOTE: add condition (0: 0°, 1: 4°, 2: 12°) indicator column
subs_rot <- c(1, 2, 2, 1, 2, 2, 0, 2, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 2,
0, 1, 0, 0, 0, 1, 2, 2, 2, 0, 2, 1, 0, 0, 1, 0, 0, 2, 1, 2, 1, 2,
2, 2, 2, 1)
condition <- rep(subs_rot, each=d[, .N, .(sub)][, unique(N)])
d[, cnd := condition]
## NOTE: add rot_dir indicator column
subs_ccw = c(1, 3, 4, 6, 7, 10, 12, 14, 15, 16, 17, 19, 21, 24, 29, 31, 33, 34,
35, 36, 37, 41, 43, 47)
d[, rot_dir := 'cw']
d[sub %in% subs_ccw, rot_dir := 'ccw']
## NOTE: add phase means for baseline correction
d[, ee_mean := mean(Endpoint_Error, na.rm=T), .(sub, phase, Target)]
d[, ee_mean_correction_fb := ee_mean[which(phase=="Baseline_S")][1], .(Target, rot_dir)]
d[, ee_mean_correction_nfb := ee_mean[which(phase=="Baseline_NFB")][1], .(Target, rot_dir)]
## NOTE: flip rot_dir for bcee and plots
d[rot_dir == 'cw' &
phase %in% c('Training', 'Generalisation', 'Relearning', 'Washout'),
Endpoint_Error := -1 * Endpoint_Error]
d[rot_dir == 'cw' &
phase %in% c('Training', 'Generalisation', 'Relearning', 'Washout'),
imv_Error := -1 * imv_Error]
d[phase %in% c('Prebaseline', 'Baseline_NFB', 'Generalisation', 'Washout'),
Appl_Perturb := NaN]
d[rot_dir == 'cw' &
phase %in% c('Training', 'Generalisation', 'Relearning', 'Washout'),
Appl_Perturb := -1 * Appl_Perturb]
## NOTE: Perform baseline correction
d[, bcee := Endpoint_Error]
d[phase %in% c("Generalisation", "Washout"), bcee := Endpoint_Error - ee_mean_correction_nfb]
d[phase %in% c("Postbaseline", "Training", "Relearning"), bcee := Endpoint_Error - ee_mean_correction_nfb]
# --------------------------------------------------------------------------------------------------------
# Results experiment: all trials collapsed across cnd
# -------------------------------------------------
## Note: Performance accross all trials bcee
dd <- d[, .(mean(bcee, na.rm=T), sd(bcee, na.rm=T)/sqrt(16)), .(rot_dir, trial)]
plt1 <- ggplot(dd, aes(trial, V1, color=as.factor(rot_dir))) +
geom_line(alpha=0.4) +
labs(title = 'Overall Performance',
x = 'Trial',
y = 'Baseline corrected EE (in °)',
color = 'Rotation \n Direction') +
scale_x_continuous(breaks=seq(0, 1200, 200), limits = c(0, 1272), expand = c(0, 0)) +
scale_y_continuous(breaks=c(-10, -5, 0, 5, 10, 15, 20), expand = c(0, 0)) +
geom_segment(aes(x=600,xend=1000,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1172,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=600,xend=600,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1000,xend=1000,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1072,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1172,xend=1172,y=0,yend=15), color = 'azure3') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
## NOTE: generalisation curve bcee
dd <- d[phase == "Generalisation",
.(mean(bcee, na.rm = T), sd(bcee, na.rm = T)/sqrt(.N)),
.(rot_dir, target_deg)]
plt2 <- ggplot(dd, aes(x = target_deg, y = V1, colour = as.factor(rot_dir))) +
geom_line(alpha = 0.6) +
labs(title = 'Generalisation across Trials',
x = 'Target Position (in °)',
y = 'Baseline corrected EE (in °)',
color = 'Rotation \n Direction') +
geom_errorbar(aes(ymin=V1-V2, ymax=V1+V2), width=10) +
scale_x_continuous(breaks=c(-120, -60, 0, 60, 120),
limits = c(-150, 150)) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.title.y = element_blank())
ggarrange(plt1, plt2, widths = c(2, 1), ncol = 2, legend = 'right', common.legend = T)
ggsave('../figures/inspect_difference_rotation/comparison_cw_ccw.png', width=10, height=4)
# Results experiment: all trials collapsed across cnd
# -------------------------------------------------
## Note: Performance accross all trials bcee
dd <- d[phase %in% c('Training', 'Generalisation', 'Relearning', 'Washout'),
.(mean(bcee, na.rm=T), sd(bcee, na.rm=T)/sqrt(16)), .(rot_dir, trial)]
plt1 <- ggplot(dd, aes(trial, V1, color=as.factor(rot_dir))) +
geom_line(alpha=0.4) +
labs(title = 'Overall Performance',
x = 'Trial',
y = 'Baseline corrected EE (in °)',
color = 'Rotation \n Direction') +
scale_x_continuous(breaks=seq(0, 1200, 200), limits = c(0, 1272), expand = c(0, 0)) +
scale_y_continuous(breaks=c(-10, -5, 0, 5, 10, 15, 20), expand = c(0, 0)) +
geom_segment(aes(x=600,xend=1000,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1172,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=600,xend=600,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1000,xend=1000,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1072,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1172,xend=1172,y=0,yend=15), color = 'azure3') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
## NOTE: generalisation curve bcee
dd <- d[phase == "Generalisation",
.(mean(bcee, na.rm = T), sd(bcee, na.rm = T)/sqrt(.N)),
.(rot_dir, target_deg)]
plt2 <- ggplot(dd, aes(x = target_deg, y = V1, colour = as.factor(rot_dir))) +
geom_line(alpha = 0.6) +
labs(title = 'Generalisation across Trials',
x = 'Target Position (in °)',
y = 'Baseline corrected EE (in °)',
color = 'Rotation \n Direction') +
geom_errorbar(aes(ymin=V1-V2, ymax=V1+V2), width=10) +
scale_x_continuous(breaks=c(-120, -60, 0, 60, 120),
limits = c(-150, 150)) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.title.y = element_blank())
ggarrange(plt1, plt2, widths = c(2, 1), ncol = 2, legend = 'right', common.legend = T)
ggsave('../figures/inspect_difference_rotation/comparison_cw_ccw.png', width=10, height=4)
# Results experiment: all trials collapsed across cnd
# -------------------------------------------------
## Note: Performance accross all trials bcee
dd <- d[phase %in% c('Training', 'Generalisation', 'Relearning', 'Washout'),
.(mean(bcee, na.rm=T), sd(bcee, na.rm=T)/sqrt(16)), .(rot_dir, trial)]
plt1 <- ggplot(dd, aes(trial, V1, color=as.factor(rot_dir))) +
geom_line(alpha=0.4) +
labs(title = 'Overall Performance',
x = 'Trial',
y = 'Baseline corrected EE (in °)',
color = 'Rotation \n Direction') +
# scale_x_continuous(breaks=seq(0, 1200, 200), limits = c(0, 1272), expand = c(0, 0)) +
scale_y_continuous(breaks=c(-10, -5, 0, 5, 10, 15, 20), expand = c(0, 0)) +
geom_segment(aes(x=600,xend=1000,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1172,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=600,xend=600,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1000,xend=1000,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1072,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1172,xend=1172,y=0,yend=15), color = 'azure3') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
## NOTE: generalisation curve bcee
dd <- d[phase == "Generalisation",
.(mean(bcee, na.rm = T), sd(bcee, na.rm = T)/sqrt(.N)),
.(rot_dir, target_deg)]
plt2 <- ggplot(dd, aes(x = target_deg, y = V1, colour = as.factor(rot_dir))) +
geom_line(alpha = 0.6) +
labs(title = 'Generalisation across Trials',
x = 'Target Position (in °)',
y = 'Baseline corrected EE (in °)',
color = 'Rotation \n Direction') +
geom_errorbar(aes(ymin=V1-V2, ymax=V1+V2), width=10) +
scale_x_continuous(breaks=c(-120, -60, 0, 60, 120),
limits = c(-150, 150)) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.title.y = element_blank())
ggarrange(plt1, plt2, widths = c(1, 1), ncol = 2, legend = 'right', common.legend = T)
ggsave('../figures/inspect_difference_rotation/comparison_cw_ccw.png', width=10, height=4)
# Results experiment: all trials collapsed across cnd
# -------------------------------------------------
## Note: Performance accross all trials bcee
dd <- d[phase %in% c('Training', 'Generalisation', 'Relearning', 'Washout'),
.(mean(bcee, na.rm=T), sd(bcee, na.rm=T)/sqrt(16)), .(rot_dir, trial)]
plt1 <- ggplot(dd, aes(trial, V1, color=as.factor(rot_dir))) +
geom_line(alpha=0.4) +
labs(title = 'Overall Performance',
x = 'Trial',
y = 'Baseline corrected EE (in °)',
color = 'Rotation \n Direction') +
# scale_x_continuous(breaks=seq(0, 1200, 200), limits = c(0, 1272), expand = c(0, 0)) +
scale_y_continuous(breaks=c(-10, -5, 0, 5, 10, 15, 20), expand = c(0, 0)) +
geom_segment(aes(x=600,xend=1000,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1172,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=600,xend=600,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1000,xend=1000,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1072,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1172,xend=1172,y=0,yend=15), color = 'azure3') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
## NOTE: generalisation curve bcee
dd <- d[phase == "Generalisation",
.(mean(bcee, na.rm = T), sd(bcee, na.rm = T)/sqrt(.N)),
.(rot_dir, target_deg)]
plt2 <- ggplot(dd, aes(x = target_deg, y = V1, colour = as.factor(rot_dir))) +
geom_line(alpha = 0.6) +
labs(title = 'Generalisation across Trials',
x = 'Target Position (in °)',
y = 'Baseline corrected EE (in °)',
color = 'Rotation \n Direction') +
geom_errorbar(aes(ymin=V1-V2, ymax=V1+V2), width=10) +
scale_x_continuous(breaks=c(-120, -60, 0, 60, 120),
limits = c(-150, 150)) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.title.y = element_blank())
ggarrange(plt1, plt2, widths = c(2, 1), ncol = 2, legend = 'right', common.legend = T)
ggsave('../figures/inspect_difference_rotation/comparison_cw_ccw.png', width=10, height=4)
# Results experiment: all trials collapsed across cnd
# -------------------------------------------------
## Note: Performance accross all trials bcee
dd <- d[phase %in% c('Training', 'Generalisation', 'Relearning', 'Washout'),
.(mean(bcee, na.rm=T), sd(bcee, na.rm=T)/sqrt(16)), .(rot_dir, trial)]
plt1 <- ggplot(dd, aes(trial, V1, color=as.factor(rot_dir))) +
geom_line(alpha=0.4) +
labs(title = 'Overall Performance',
x = 'Trial',
y = 'Baseline corrected EE (in °)',
color = 'Rotation \n Direction') +
# scale_x_continuous(breaks=seq(0, 1200, 200), limits = c(0, 1272), expand = c(0, 0)) +
scale_y_continuous(breaks=c(-10, -5, 0, 5, 10, 15, 20), expand = c(0, 0)) +
geom_segment(aes(x=600,xend=1000,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1172,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=600,xend=600,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1000,xend=1000,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1072,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1172,xend=1172,y=0,yend=15), color = 'azure3') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
## NOTE: generalisation curve bcee
dd <- d[phase == "Generalisation",
.(mean(bcee, na.rm = T), sd(bcee, na.rm = T)/sqrt(.N)),
.(rot_dir, target_deg)]
plt2 <- ggplot(dd, aes(x = target_deg, y = V1, colour = as.factor(rot_dir))) +
geom_line(alpha = 0.6) +
labs(title = 'Generalisation across Trials',
x = 'Target Position (in °)',
y = 'Baseline corrected EE (in °)',
color = 'Rotation \n Direction') +
geom_errorbar(aes(ymin=V1-V2, ymax=V1+V2), width=10) +
scale_x_continuous(breaks=c(-120, -60, 0, 60, 120),
limits = c(-150, 150)) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.title.y = element_blank())
ggarrange(plt1, plt2, widths = c(2, 1), ncol = 2, legend = 'right', common.legend = T)
ggsave('../figures/inspect_difference_rotation/comparison_cw_ccw.png', width=10, height=2)
# Results experiment: Illustrate Design Overall performance
# ---------------------------------------------------------
## NOTE: plot all trials collapsed across CW / CCW
dd <- d[, .(mean(bcee, na.rm=T), sd(bcee, na.rm=T)/sqrt(16)), .(cnd, trial)]
ggplot(dd, aes(trial, V1, color=as.factor(cnd))) +
geom_line(alpha=0.4) +
labs(title = 'All Trials Collapsed across Variance Condition',
x = 'Trial',
y = 'Baseline corrected EE (in °)',
color = 'Variance \n Group') +
scale_x_continuous(breaks=c(120, 240, 480, 600, 1000, 1072, 1172, 1272), limits = c(0, 1272), expand = c(0, 0)) +
scale_y_continuous(breaks=c(-10, -5, 0, 5, 10, 15, 20), expand = c(0, 0)) +
geom_segment(aes(x=120,xend=240,y=0,yend=0), color = 'azure3') +
geom_segment(aes(x=240,xend=480,y=0,yend=0), color = 'azure3', linetype = 'dashed') +
geom_segment(aes(x=480,xend=600,y=0,yend=0), color = 'azure3') +
geom_segment(aes(x=600,xend=1000,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1172,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=120,xend=120,y=-10,yend=15), color = 'azure3', linetype = 'dashed') +
geom_segment(aes(x=240,xend=240,y=-10,yend=15), color = 'azure3', linetype = 'dashed') +
geom_segment(aes(x=480,xend=480,y=-10,yend=15), color = 'azure3', linetype = 'dashed') +
geom_segment(aes(x=600,xend=600,y=-10,yend=15), color = 'azure3') +
geom_segment(aes(x=1000,xend=1000,y=-10,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1072,y=-10,yend=15), color = 'azure3') +
geom_segment(aes(x=1172,xend=1172,y=-10,yend=15), color = 'azure3') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
annotate("text", x = c(60, 180, 360, 540, 800, 1036, 1122, 1222), y = -9, colour = 'grey', size = 2.5,
label = c('Prebaseline', 'Familiarisation', 'Baseline', 'Postbaseline',
'Training', 'General.', 'Relearning', 'Washout'))
ggsave('../figures/illustrate_exp_design/exp_design_performance.png', width=10, height=2)
## NOTE: look at prebaseline bias per target
dd <- d[phase == 'Prebaseline',
.(mean(bcee, na.rm=T), sd(Endpoint_Error, na.rm=T)/sqrt(16)),
.(cnd, rot_dir, target_deg)]
ggplot(dd, aes(target_deg, V1, colour=as.factor(cnd))) +
geom_point(alpha=0.4) +
geom_line(alpha=0.4) +
geom_errorbar(aes(ymin=V1-V2, ymax=V1+V2), alpha=0.4) +
theme_classic() +
labs(y = 'EE (in °)',
x = 'Target Position (in °)',
colour = 'Variance \n Group') +
scale_x_continuous(breaks = c(-150, -120, -90, -60, -30, 0,
30, 60, 90, 120, 150),
limits = c(-150, 150)) +
scale_y_continuous(limits = c(-10, 7)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(strip.background = element_rect(colour = "white", fill = "white")) +
facet_wrap(~rot_dir*cnd, scales = 'free',
labeller = label_wrap_gen(multi_line = FALSE))
ggsave('../figures/inspect_prebaseline/prebaseline_bias.png',
width=10, height=4)
## NOTE: Compute correlation between imve and ee
cor_total <- cor(d$Endpoint_Error, d$imv_Error, use = "complete.obs")
cor_subs <- d[, cor(Endpoint_Error, imv_Error, use = "complete.obs"), sub]
cor_total
cor_subs <- d[, cor(Endpoint_Error, imv_Error, use = "complete.obs"), sub]
cor_subs
cor_subs[V1 %in% c(min(V1), max(V1))]
library(data.table)
library(ggplot2)
library(ggpubr)
rm( list = ls() )
setwd('D:/Studium/Auslandsstudium/TuitionWaver_Master/Masterthesis/Analysis/Exp_Variance/Modelling/sorted/code')
# # ------------------------------------------------------------------------------------------------------------
# # Extracting csv files for SubjData
# -----------------------------------
# setwd("../../../MatlabAnalysis/AnalysisData/Exp_Variance_MissingsReplaced_CorrectRTs")
#
# dir_name <- "../../../Modelling/sorted/data"
#
#
# # Extracting csv files for SubjData
# # ---------------------------------
# myfolders <- list.dirs(recursive = FALSE)
# myfolders <- myfolders[1:8]
#
# for (h in 1:length(myfolders)){
#   subjdatafiles <- list.files(myfolders[h], pattern = "*SubjData.csv")
#   for (g in 1:length(subjdatafiles)){
#     file.copy(paste0(myfolders[h], "/", subjdatafiles[g]), dir_name)
#   }
# }
#
# rm( list = ls() )
# setwd("../../../Modelling/sorted/code")
# # ------------------------------------------------------------------------------------------------------------
# Transform Dataframe Subject Main Data
# -------------------------------------
col_names <- c("Target", "Trial_Phase", "Appl_Perturb",
"imv_X", "imv_Y",
"Endpoint_X", "Endpoint_Y",
"imv_Error", "Endpoint_Error",
"imv_Error_Mean", "Endpoint_Error_Mean",
"MT", "RT", "Max_Vel")
phase_names_f <- c('Prebaseline_SubjData', 'Familiarisation_SubjData',
'Baseline_NFB_SubjData', 'Baseline_SubjData',
'Postbaseline_SubjData', 'Training_SubjData',
'Generalisation_SubjData', 'Relearning_SubjData',
'Washout_SubjData')
phase_names <- c('Prebaseline', 'Familiarisation', 'Baseline_NFB', 'Baseline_S',
'Postbaseline', 'Training', 'Generalisation', 'Relearning',
'Washout')
phase_order <- 1:9
ldf_rec <- list()
for (i in 1:length(phase_names_f)) {
f_names <- list.files(paste('../data/', sep=''),
pattern=paste(phase_names_f[i]),
full.names=TRUE)
ldf <- lapply(f_names, function(z) {z<-fread(z); setnames(z,col_names)})
ldf <- lapply(seq_along(ldf), function(z) ldf[[z]][, sub := rep(z, .N)])
ldf <- lapply(seq_along(ldf), function(z) ldf[[z]][, phase := rep(phase_names[i], .N)])
ldf <- lapply(seq_along(ldf), function(z) ldf[[z]][, phase_order := rep(phase_order[i], .N)])
ldf_rec <- c(ldf_rec, ldf)
}
d <- rbindlist(ldf_rec)
d <- d[order(sub)]
## NOTE: Adapt the NFB targets (1 to 12)
d[Target %in% 13:24, Target := as.integer(Target - 12)]
## NOTE: add target_deg indicator column
d[, target_deg := -1]
d[Target == 1, target_deg := 0]
d[Target == 2, target_deg := 30]
d[Target == 3, target_deg := 60]
d[Target == 4, target_deg := 90]
d[Target == 5, target_deg := 120]
d[Target == 6, target_deg := 150]
d[Target == 7, target_deg := 180]
d[Target == 8, target_deg := -150]
d[Target == 9, target_deg := -120]
d[Target == 10, target_deg := -90]
d[Target == 11, target_deg := -60]
d[Target == 12, target_deg := -30]
## NOTE: add trial indicator column (fix problem with nfb and fb trials in baseline)
d <- d[order(sub, phase_order, Trial_Phase)]
d[, trial := 1:.N, .(sub)]
d[phase %in% c("Baseline_S", "Baseline_NFB"), trial := Trial_Phase+240]
## NOTE: add aware indicator column
subs_explicit = c(1, 2, 3, 5, 9, 10, 16, 18, 19, 20, 24, 28, 29, 30, 31, 33, 34,
40, 41, 44, 45, 46, 47, 48)
d[, aware := 'implicit']
d[sub %in% subs_explicit, aware := 'explicit']
## NOTE: add condition (0: 0°, 1: 4°, 2: 12°) indicator column
subs_rot <- c(1, 2, 2, 1, 2, 2, 0, 2, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 2,
0, 1, 0, 0, 0, 1, 2, 2, 2, 0, 2, 1, 0, 0, 1, 0, 0, 2, 1, 2, 1, 2,
2, 2, 2, 1)
condition <- rep(subs_rot, each=d[, .N, .(sub)][, unique(N)])
d[, cnd := condition]
## NOTE: add rot_dir indicator column
subs_ccw = c(1, 3, 4, 6, 7, 10, 12, 14, 15, 16, 17, 19, 21, 24, 29, 31, 33, 34,
35, 36, 37, 41, 43, 47)
d[, rot_dir := 'cw']
d[sub %in% subs_ccw, rot_dir := 'ccw']
## NOTE: add phase means for baseline correction
d[, ee_mean := mean(Endpoint_Error, na.rm=T), .(sub, phase, Target)]
d[, ee_mean_correction_fb := ee_mean[which(phase=="Baseline_S")][1], .(Target, rot_dir)]
d[, ee_mean_correction_nfb := ee_mean[which(phase=="Baseline_NFB")][1], .(Target, rot_dir)]
## NOTE: flip rot_dir for bcee and plots
d[rot_dir == 'cw' &
phase %in% c('Training', 'Generalisation', 'Relearning', 'Washout'),
Endpoint_Error := -1 * Endpoint_Error]
d[rot_dir == 'cw' &
phase %in% c('Training', 'Generalisation', 'Relearning', 'Washout'),
imv_Error := -1 * imv_Error]
d[phase %in% c('Prebaseline', 'Baseline_NFB', 'Generalisation', 'Washout'),
Appl_Perturb := NaN]
d[rot_dir == 'cw' &
phase %in% c('Training', 'Generalisation', 'Relearning', 'Washout'),
Appl_Perturb := -1 * Appl_Perturb]
## NOTE: Perform baseline correction
d[, bcee := Endpoint_Error]
d[phase %in% c("Generalisation", "Washout"), bcee := Endpoint_Error - ee_mean_correction_nfb]
d[phase %in% c("Postbaseline", "Training", "Relearning"), bcee := Endpoint_Error - ee_mean_correction_nfb]
# --------------------------------------------------------------------------------------------------------
# Results experiment: all trials collapsed across cnd
# -------------------------------------------------
## Note: Performance accross all trials bcee
dd <- d[phase %in% c('Training', 'Generalisation', 'Relearning', 'Washout'),
.(mean(bcee, na.rm=T), sd(bcee, na.rm=T)/sqrt(16)), .(rot_dir, trial)]
plt1 <- ggplot(dd, aes(trial, V1, color=as.factor(rot_dir))) +
geom_line(alpha=0.4) +
labs(title = 'Overall Performance',
x = 'Trial',
y = 'Baseline corrected EE (in °)',
color = 'Rotation \n Direction') +
# scale_x_continuous(breaks=seq(0, 1200, 200), limits = c(0, 1272), expand = c(0, 0)) +
scale_y_continuous(breaks=c(-10, -5, 0, 5, 10, 15, 20), expand = c(0, 0)) +
geom_segment(aes(x=600,xend=1000,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1172,y=15,yend=15), color = 'azure3') +
geom_segment(aes(x=600,xend=600,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1000,xend=1000,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1072,xend=1072,y=0,yend=15), color = 'azure3') +
geom_segment(aes(x=1172,xend=1172,y=0,yend=15), color = 'azure3') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
## NOTE: generalisation curve bcee
dd <- d[phase == "Generalisation",
.(mean(bcee, na.rm = T), sd(bcee, na.rm = T)/sqrt(.N)),
.(rot_dir, target_deg)]
plt2 <- ggplot(dd, aes(x = target_deg, y = V1, colour = as.factor(rot_dir))) +
geom_line(alpha = 0.6) +
labs(title = 'Generalisation across Targets',
x = 'Target Position (in °)',
y = 'Baseline corrected EE (in °)',
color = 'Rotation \n Direction') +
geom_errorbar(aes(ymin=V1-V2, ymax=V1+V2), width=10) +
scale_x_continuous(breaks=c(-120, -60, 0, 60, 120),
limits = c(-150, 150)) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.title.y = element_blank())
ggarrange(plt1, plt2, widths = c(2, 1), ncol = 2, legend = 'right', common.legend = T)
ggsave('../figures/inspect_difference_rotation/comparison_cw_ccw.png', width=10, height=2)
